[{"/Users/gc/Desktop/basic-react/src/index.js":"1","/Users/gc/Desktop/basic-react/src/reportWebVitals.js":"2","/Users/gc/Desktop/basic-react/src/App.js":"3","/Users/gc/Desktop/basic-react/src/pages/HomePage.js":"4","/Users/gc/Desktop/basic-react/src/components/NavBarDisplay.js":"5","/Users/gc/Desktop/basic-react/src/components/LoadingIndicator.js":"6","/Users/gc/Desktop/basic-react/src/pages/UserProfilePage.js":"7","/Users/gc/Desktop/basic-react/src/containers/UserImages.js":"8","/Users/gc/Desktop/basic-react/src/components/AuthModal.js":"9","/Users/gc/Desktop/basic-react/src/components/LoginForm.js":"10","/Users/gc/Desktop/basic-react/src/components/SignUpForm.js":"11","/Users/gc/Desktop/basic-react/src/pages/MyProfilePage.js":"12"},{"size":691,"mtime":1607499874000,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":1581,"mtime":1607571940000,"results":"16","hashOfConfig":"14"},{"size":1825,"mtime":1607308724000,"results":"17","hashOfConfig":"14"},{"size":2194,"mtime":1607571714000,"results":"18","hashOfConfig":"14"},{"size":1294,"mtime":1607306024000,"results":"19","hashOfConfig":"14"},{"size":808,"mtime":1607310344000,"results":"20","hashOfConfig":"14"},{"size":1497,"mtime":1607584904000,"results":"21","hashOfConfig":"14"},{"size":673,"mtime":1607570664000,"results":"22","hashOfConfig":"14"},{"size":2282,"mtime":1607572656000,"results":"23","hashOfConfig":"14"},{"size":5908,"mtime":1607584562000,"results":"24","hashOfConfig":"14"},{"size":966,"mtime":1607584982000,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"14f5wn6",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/gc/Desktop/basic-react/src/index.js",[],["53","54"],"/Users/gc/Desktop/basic-react/src/reportWebVitals.js",[],"/Users/gc/Desktop/basic-react/src/App.js",[],"/Users/gc/Desktop/basic-react/src/pages/HomePage.js",[],"/Users/gc/Desktop/basic-react/src/components/NavBarDisplay.js",[],"/Users/gc/Desktop/basic-react/src/components/LoadingIndicator.js",[],"/Users/gc/Desktop/basic-react/src/pages/UserProfilePage.js",[],"/Users/gc/Desktop/basic-react/src/containers/UserImages.js",[],"/Users/gc/Desktop/basic-react/src/components/AuthModal.js",[],"/Users/gc/Desktop/basic-react/src/components/LoginForm.js",["55"],"import React, {useState} from \"react\"\nimport {ModalHeader, ModalBody, ModalFooter, Button, Form, FormGroup, Label, Input} from \"reactstrap\"\nimport axios from 'axios'\nimport {toast} from 'react-toastify'\nimport { useHistory } from 'react-router-dom';\n\nconst LoginForm = ({toggleIsLogin, toggle, setLoggedIn}) => {\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const history = useHistory()\n  \n  const handleLogin = (e) =>{\n    e.preventDefault()\n\n    axios({\n      method: 'post',\n      url: 'https://insta.nextacademy.com/api/v1/login',\n      data: {\n        username: username,\n        password: password\n      }\n    }).then (result => {\n      console.log(result)\n      localStorage.setItem('jwt', result.data.auth_token)\n      setLoggedIn(true)\n      setUsername(\"\")\n      setPassword(\"\")\n      toggle()\n      history.push(\"/profile\")\n\n      toast.success(\"Successfully Signed In! Yay!\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        });\n\n        localStorage.setItem(\"user\", JSON.stringify(result.data.user))\n    })\n    .catch(err =>{\n      console.log(err)\n    })\n  }\n  return <>\n    <Form>\n      <ModalHeader toggle={toggle}>Log In</ModalHeader>\n      <ModalBody>\n          <FormGroup>\n            <Label for=\"username\">Username</Label>\n            <Input type=\"username\" name=\"username\" id=\"username\" placeholder=\"username\" value={username}  onChange={(e) => {setUsername(e.target.value)}}/>\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"password\">Password</Label>\n            <Input type=\"password\" name=\"password\" id=\"password\" placeholder=\"password\" value={password} onChange={(e) => {setPassword(e.target.value)}}/>\n          </FormGroup>\n          <p>New member? <a href=\"#\" onClick ={(e) =>{\n            e.preventDefault()\n            toggleIsLogin()\n          }}>Sign up here</a></p>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"primary\" onClick={handleLogin}>Log In</Button>{' '}\n        <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n      </ModalFooter>\n    </Form>\n  </>\n  \n}\n\n\nexport default LoginForm","/Users/gc/Desktop/basic-react/src/components/SignUpForm.js",["56","57"],"import React, {useState, useEffect} from \"react\"\nimport {ModalHeader, ModalBody, ModalFooter, Button, Form, FormGroup,FormText,FormFeedback, Label, Input} from \"reactstrap\"\nimport axios from \"axios\"\nimport {toast} from \"react-toastify\"\nimport { useHistory } from 'react-router-dom';\n\nconst SignUpForm = ({toggleIsLogin, toggle, setLoggedIn}) => {\n  const history = useHistory()\n  const [delay, setDelay] = useState(null);\n  const [usernameValid, setUsernameValid] = useState(true);\n  const [passwordValid, setPasswordValid] = useState(true)\n  const [confirmPassword, setConfirmPassword] =useState(\"\")\n  const [username, setUsername] = useState(\"\")\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  \n  const checkUsername = newUsername => {\n    // this should only trigger after you stop typing for 500ms\n    console.log(\"Making API call to check username!\");\n    axios\n      .get(\n        `https://insta.nextacademy.com/api/v1/users/check_name?username=${newUsername}`\n      )\n      .then(response => {\n        console.log(response.data);\n        if (response.data.valid) {\n          setUsernameValid(true);\n        } else {\n          setUsernameValid(false);\n        }\n      });\n  };\n  const handleInput = e => {\n    if(e.target.name ===\"username\"){\n      // clears queue so that the old keystrokes don't trigger axios call\n      clearTimeout(delay);\n      const newUsername = e.target.value;\n      setUsername(newUsername);\n\n      // put each new keystroke into the queue\n      const newDelay = setTimeout(() => {\n        checkUsername(newUsername);\n      }, 500);\n\n      setDelay(newDelay);\n    }\n    if(e.target.name===\"email\"){\n      setEmail(e.target.value)\n    }\n    if(e.target.name ===\"password\"){\n      setPassword(e.target.value)\n    }\n    if(e.target.name === \"confirmPassword\"){\n      setConfirmPassword(e.target.value)\n    }\n    \n  };\n  const getInputProp = () => {\n    if (!username.length) {\n      return null;\n    }\n\n    if (username.length <= 6) {\n      return { invalid: true };\n    }\n\n    if (usernameValid) {\n      return { valid: true };\n    } else {\n      return { invalid: true };\n    }\n  };\n\n  const getFormFeedback = () => {\n    if (!username.length) {\n      return null;\n    }\n\n    if (username.length <= 6) {\n      return <FormFeedback invalid>Must be at least 6 characters</FormFeedback>;\n    }\n\n    if (usernameValid) {\n      return <FormFeedback valid>Sweet! That name is available</FormFeedback>;\n    } else {\n      return <FormFeedback invalid>Sorry! Username is taken</FormFeedback>;\n    }\n  };\n  const getPwInputProps =() =>{\n    if(confirmPassword.length === 0){\n      return null\n    }\n    if(password === confirmPassword){\n      return {valid:true}\n    }else {\n      return {invalid:true}\n    }\n  }\n  const checkPassword = () =>{\n    if(!confirmPassword.length){\n      return null\n    }\n    if(password === confirmPassword){\n      return <FormText valid>Passwords match!</FormText>\n    } else {\n      return <FormText invalid>Passwords do not match</FormText>\n    }\n  }\n  useEffect( () =>{\n    if(password === confirmPassword){\n      setPasswordValid(true)\n    } else {\n      setPasswordValid(false)\n    }\n  },[confirmPassword])\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    axios({\n      method: 'POST',\n      url: 'https://insta.nextacademy.com/api/v1/users/',\n      data: {\n        username: username,\n        email: email,\n        password: password\n      }\n    })\n    .then(response => {\n      console.log(response)\n      toggle()\n  \n      toast(response.data.message, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        });\n        setLoggedIn(true)\n        localStorage.setItem('jwt', response.data.auth_token)\n        history.push(\"/profile\")\n    })\n    .catch(error => {\n      console.error(error.response) // so that we know what went wrong if the request failed\n    })\n  }\n  const checkFormValid = () =>{\n    return !(username && email && passwordValid)\n  }\n  return <>\n    <Form>\n      <ModalHeader toggle={toggle}>Sign Up</ModalHeader>\n      <ModalBody>\n          <FormGroup>\n            <Label for=\"username\">Username</Label>\n            <Input \n              type=\"text\" \n              name=\"username\" \n              value={username} \n              onChange={handleInput}\n              {...getInputProp()}\n            />\n            {getFormFeedback()}\n            <FormText>Enter a username between 6 and 20 characters</FormText> \n          </FormGroup>\n          <FormGroup>\n            <Label for=\"email\">Email</Label>\n            <Input \n              type=\"email\" \n              name=\"email\" \n              value={email} \n              onChange={handleInput} />\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"password\">Password</Label>\n            <Input \n              type=\"password\" \n              name=\"password\" \n              value={password} \n              onChange={handleInput} />\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"password\">Confirm Password</Label>\n            <Input \n              type=\"password\" \n              name=\"confirmPassword\" \n              value={confirmPassword} \n              onChange={handleInput} \n              {...getPwInputProps()}/>\n              {checkPassword()}\n          </FormGroup>\n          <p>Already a member? <a href=\"#\" onClick ={(e) =>{\n            e.preventDefault()\n            toggleIsLogin()\n          }}>Log in here</a></p>\n      </ModalBody>\n      <ModalFooter>\n        <Button \n          color=\"primary\" \n          disabled={checkFormValid()} \n          onClick={handleSubmit}>Sign Up</Button>{' '}\n        <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n      </ModalFooter>\n    </Form>\n  </>\n}\n\nexport default SignUpForm","/Users/gc/Desktop/basic-react/src/pages/MyProfilePage.js",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":59,"column":26,"nodeType":"64","endLine":62,"endColumn":14},{"ruleId":"65","severity":1,"message":"66","line":115,"column":5,"nodeType":"67","endLine":115,"endColumn":22,"suggestions":"68"},{"ruleId":"62","severity":1,"message":"63","line":194,"column":32,"nodeType":"64","endLine":197,"endColumn":14},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'password'. Either include it or remove the dependency array.","ArrayExpression",["71"],"no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},"Update the dependencies array to be: [confirmPassword, password]",{"range":"74","text":"75"},[3188,3205],"[confirmPassword, password]"]